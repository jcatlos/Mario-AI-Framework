package levelGenerators.jcatlos

import java.io.File
import java.lang.Integer.max
import kotlin.random.Random
import kotlin.text.StringBuilder

/**
   * Data class allowing more elegant way of passing [Macro]-s from [RoomParser] to [RoomTemplate]
   *
   * Macros are executed at the time of a generation of an instance of [Room]
   *
   * @param string a string to be placed at the given position
   * @param prob [Int] probability (0-100) of the string appearing ath the given place
 */
data class MacroPair(var string: String, var prob: Int) {}

/**
 * macro to be executed at [Room] generation
 *
 * @param macros [ArrayList<MacroPair>] where each pair corresponds to one option to appear. Every option must be of the same length. The sum of their probabilities must not exceed 100. If the sum is below 100, the remaining probability is an implicit one - a sequence of '-'.
 * @property length the length of the string provided by the macro
 */

class Macro(var macros: ArrayList<MacroPair> = arrayListOf()){
    var length = 0
    init{
        for(macro in macros){
            length = max(length, macro.string.length)
        }
    }

    /**
     * Executes the [Macro] and returns the generated [String]
     *
     */

    fun execute(): String{
        //println("executing ${macros.toString()}")
        var rnd = Random.nextInt(100)
        var num: Int = macros[0].prob
        var index = 0
        while(rnd > num){
            println(index)
            rnd -= num
            index++
            if(index >= macros.size){
                return "-".repeat(length)
            }
            num = macros[index].prob
        }
        return macros[index].string.padEnd(macros[index].string.length, '-')
    }

    /**
     * Adds a [MacroPair] as an option to be generated by the [Macro]
     *
     * No checks are done, but the conditions must still be met after adding
     *
     * @param pair the [MacroPair] to be added
     */

    fun addPair(pair: MacroPair){
        length = max(length, pair.string.length)
        macros.add(pair)
    }
}


/**
 * Class used to store information about a Room prototype from a file
 *
 * - Prevents mutliple file reads at runtime
 * - generate() function generates a Room based on the prototype
 * - Allows querying the templates in SharedData on properties of the
 *
 * @param room [StringBuilder] containing the text representation of the room (macros are rep;aced by an adequate amount of '-')
 * @property width the width of the room
 * @param diff the arbitrary difficulty of the room
 * @param tags the *tags* for the room
 * @param macros the [Macro]-s specified in the room file
 * @param start [Coords] of the starting point
 * @param finish list of [Coords] of the exit points from the room
 */

class RoomTemplate(
        var room: Chunk,
        var diff: Int,
        var tags: ArrayList<String>,
        var macros: Map<Coords, Macro>,
        var start: Coords,
        var finish: ArrayList<Coords>)
{

    /**
     * Generates a [Room] based on this template
     */

    fun generate(): Room{
        var newRoom = Chunk(room.getAsStringBuilder());
        var newDiff = diff

        for((coords, macro) in macros){
            var macroResult = macro.execute()
            for(i in macroResult.indices){
                newRoom.content[coords.x + i][coords.y] = macroResult[i]
            }
        }

        return Room(newRoom, newDiff, tags, start, finish)
    }
}
