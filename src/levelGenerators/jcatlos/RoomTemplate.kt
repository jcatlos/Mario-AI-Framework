package levelGenerators.jcatlos

import java.io.File
import java.lang.Integer.max
import kotlin.random.Random
import kotlin.text.StringBuilder

/**
   * Data class allowing more elegant way of passing [Macro]-s from [RoomParser] to [RoomTemplate]
   *
   * Macros are executed at the time of a generation of an instance of [Room]
   *
   * @param chunk a [Chunk] to be placed at the given position
   * @param prob [Float] probability (0-1] of the chunk appearing ath the given place
 */
data class MacroPair(var chunk: Chunk, var prob: Float) {}

/**
 * macro to be executed at [Room] generation
 *
 * @property width the width of the chunk to be filled
 * @property height the height of the chunk to be filled
 * @property options [ArrayList<MacroPair>] where each pair corresponds to one option to appear. Every option must be of the same dimensions. The sum of their probabilities should not exceed 1. If the sum is below 1, the remaining probability is an implicit one - a chunk of '-'.
 */

class Macro(
        var name: String,
        var width: Int,
        var height: Int,
        private var options: ArrayList<MacroPair>
){

    /**
     * Executes the [Macro] and returns the generated [Chunk]
     *
     */

    fun execute(): Chunk{
        var rnd: Float = Random.nextFloat()
        var total: Float = 0F
        //var index = 0
        for((chunk, prob) in options){
            total += prob
            if(rnd <= total){
                return chunk
            }
        }
        // If none is selected
        var emptyChunk = Chunk(width, height)
        for(x in 0 until emptyChunk.width){
            for(y in 0 until emptyChunk.height){
                emptyChunk.content[x][y] = '-'
            }
        }

        return emptyChunk
    }

    /**
     * Adds a [MacroPair] as an option to be generated by the [Macro]
     *
     * Only dimensions of the chunk are checked - the total of probabilities are still checked only until one
     * If dimensions are not same, macro is not added
     *
     * @param pair the [MacroPair] to be added
     */

    fun addPair(pair: MacroPair){
        if(pair.chunk.width == width && pair.chunk.height == height){
            options.add(pair)
        }
    }
}


/**
 * Class used to store information about a Room prototype from a file
 *
 * - Prevents mutliple file reads at runtime
 * - generate() function generates a Room based on the prototype
 * - Allows querying the templates in SharedData on properties of the
 *
 * @param room [StringBuilder] containing the text representation of the room (macros are rep;aced by an adequate amount of '-')
 * @property width the width of the room
 * @param diff the arbitrary difficulty of the room
 * @param tags the *tags* for the room
 * @param macros the [Macro]-s specified in the room file
 * @param start [Coords] of the starting point
 * @param finish list of [Coords] of the exit points from the room
 */

class RoomTemplate(
        var room: Chunk,
        var tags: ArrayList<String>,
        var macros: Map<Char, Macro>,
        var start: Coords,
        var finish: ArrayList<Coords>)
{

    /**
     * Generates a [Room] based on this template
     */

    fun generate(): Room{
        var newRoom = Chunk(room.getAsStringBuilder());

        println(macros)
        for((macroChar, macro) in macros){
            var macroSpace = LevelConnector.findTemplateSpace(newRoom, macroChar)
            println(macroSpace.UL_Corner())
            var chunk = macro.execute()
            newRoom.emplaceChunk(chunk, macroSpace.UL_Corner())
        }

        return Room(newRoom, tags, start, finish)
    }
}
